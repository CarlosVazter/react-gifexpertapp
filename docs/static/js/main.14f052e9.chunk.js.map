{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAqBhD,OACI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAe,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OAEzCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,4BAAKA,QCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAEpB,IAEEqB,EDL2BK,CAAc1B,GAAnCa,EAVwB,EAU7BN,KAAca,EAVe,EAUfA,QAGtB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,8CAAf,SACMH,EAAOJ,KAAK,SAAAkB,GAAK,OACX,cAAC,EAAD,eAIKA,GAHGA,EAAMhB,aEMvBiB,EA5BO,WAAO,IAAD,EAEc1C,mBAAU,CAAC,gBAFzB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KASxB,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAGQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAA4BA,SAAWA,GAAtBA,Y,MCjBzC8B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.14f052e9.chunk.js","sourcesContent":["import React, { useState } from 'react'\n// setCategories como un elemento requerido\nimport PropTypes  from 'prop-types'\n\n\nexport const AddCategory = ( { setCategories } ) => {\n    \n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // Validación para que no se mande el formulario vacío.\n        if( inputValue.trim().length > 2  ){\n\n            // Trabajando con la prop del componente anterior (setCategories) para pasar el nuevo valor.\n            setCategories( categ => [ inputValue, ...categ ] \n                )\n            setInputValue('')\n        }\n    }\n    \n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            >\n            </input>\n        </form>\n    )\n}\n\n// Validación para solicitar la prop como un elemento de requerido.\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=gLdotm8BD5SRyPpjbckmdxrqcPhqeTLa`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\n// Al recibir las props con el operador spred estamos recibiendo por separado cada una de las props.\nexport const GifGridItem = ( { title, url } ) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src = { url } alt = { title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n\n    // Con useEffect hacemos que no haga una petición cada que renderiza el componente, solo cuando detecta un cambio en el componente que hace la petición, es decir, cuando se cambia o se agrega una categoría. \n    // useEffect ( ()=> {\n    //     getGifs( category )\n    //         .then( imgs => setImages( imgs ));\n    // }, [ category ] )\n\n    // Hook personalizado con desestructuración de objetos\n    const { data:images , loading } = useFetchGifs( category );\n    \n\n    return (\n        <>        \n            <h3>{ category }</h3>\n            \n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n\n            <div className=\"card-grid animate__animated animate__fadeIn\">\n                { images.map( image => (\n                        <GifGridItem \n                        key = { image.id }\n                        // image={ image }\n                        // Esta es otra forma de mandar las props.\n                        { ...image }\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [ category ] )\n\n    return state; // { data:[], loading:true }\n}\n\n\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GiftExpertApp = () => {\n\n    const [ categories, setCategories ] = useState( ['Dragon Ball'] );\n    // const handleAdd = () => {\n    //     // setCategories( [...categories, 'Naruto'] )\n    //     setCategories( categ => [...categ, 'Naruto'] )\n    // };\n\n\n    return (\n        <>\n            <h2>GiftExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />  \n            \n            <hr></hr>\n\n            <ol>\n                {\n                    // map es como un pequeño ciclo con lo que poblamos la lista.\n                    categories.map( category => (\n                        <GifGrid key = { category } category={ category } />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GiftExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GiftExpertApp from './GiftExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpertApp />,\n    document.getElementById('root')\n);"],"sourceRoot":""}